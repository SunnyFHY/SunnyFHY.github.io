<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>四旋翼PID调参笔记</title>
      <link href="/2018/10/30/%E5%9B%9B%E6%97%8B%E7%BF%BCPID%E8%B0%83%E5%8F%82%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/10/30/%E5%9B%9B%E6%97%8B%E7%BF%BCPID%E8%B0%83%E5%8F%82%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>vivadoHLS（一）</title>
      <link href="/2018/10/06/vivadoHLS-0/"/>
      <url>/2018/10/06/vivadoHLS-0/</url>
      
        <content type="html"><![CDATA[<h1 id="HLS学习"><a href="#HLS学习" class="headerlink" title="HLS学习"></a>HLS学习</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>FPGA又称可编程逻辑门阵列，因为其魔法的并行计算和魔法的可编程逻辑单元阵列，让我产生了兴趣。目前在学数电和verilog。一个月前小伙伴达成共识，要做一个参赛项目。在那个项目里面要全用verilog写的话……恕我直言！太难了(Ｔ▽Ｔ)。所以就开始学这个HLS，在用C转verilog的边缘试探。讲点正经的，这些技术工具本身就是在用户体验感的路上走了！跑了！加速了！底层的东西因为不符合普通人类思维，所以越走越窄。换个角度来说，也可以看做掌握底层的人越来越少。至于这个稀少带来的是价值提升还是被边缘化，这个还是要用发展的眼光去看的。至少现在我认为verilog/VHDL是不能抛弃的，并不是说学了HLS就用不着这些了。HLS也好，verilog/VHDL也好都有其局限性。最关键的还是使用这些工具的人自身的能力和经验。</p><h2 id="HLS基础介绍"><a href="#HLS基础介绍" class="headerlink" title="HLS基础介绍"></a>HLS基础介绍</h2><p>高层次综合（HLS）是指自动综合最初用C、C++或SystemC语言描述的数字设计。工程师之所以对高层次综合如此感兴趣，不仅是因为它能让工程师在较高的抽象层面上工作，而且还因为它能方便地生成多种设计解决方案。利用HLS，您能探索各种可能性，分析面积和性能特点，最终确定一个方案在FPGA芯片上实现算法。举例来说，您能探索将存储器映射到Block RAM（BRAM）或分布式RAM上有什么不同的影响，或者分析回路展开以及其它回路相关优化有什么效果，而且不必手动生成不同的寄存器传输级（RTL）设计。您所要做的仅仅是在C/C++/SystemC设计中设置相关指令而已。</p><p>赛灵思在其最新发布的Vivado™工具套件中推出了HLS工具。Vivado HLS是AutoESL工具的品牌转型重塑，可提供众多技术帮助您优化C/C++/SystemC代码以实现目标性能。这样的HLS工具就能帮助您在FPGA上快速实现算法，无需借助基于Verilog和VHDL等硬件描述语言的非常耗时的RTL设计方法。</p><h2 id="HLS入门学习资料"><a href="#HLS入门学习资料" class="headerlink" title="HLS入门学习资料"></a>HLS入门学习资料</h2><p>第一， 手边的学习资料。</p><p>安装Vivado HLS以后， 既包含了20个design example，50个code example:</p><p><img src="/2018/10/06/vivadoHLS-0/5096-18984-tupian1.png" alt="img"></p><p>第二， step by step教程</p><p>ug871 是xilinx公开提供的HLS教程， 包括11个例子：</p><p>C Validation<br>Interface Synthesis<br>Arbitrary Precision Types<br>Design Analysis<br>Design Optimization<br>RTL Verification<br>Using HLS IP in IP Integrator<br>Using HLS IP in a Zynq Processor Design<br>Using HLS IP in System Generator for DSP</p><p>ug871 ： <a href="http://www.xilinx.com/support/documentation/sw_manuals/xilinx2013_1/ug871-vivado-high-level-synthesis-tutorial.pdf" target="_blank" rel="external">http://www.xilinx.com/support/documentation/sw_manuals/xilinx2013_1/ug87…</a></p><p>参考设计源代码： <a href="http://www.xilinx.com/cgi-bin/docs/rdoc?v=2013.2;t=vivado+tutorials" target="_blank" rel="external">http://www.xilinx.com/cgi-bin/docs/rdoc?v=2013.2;t=vivado+tutorials</a></p><p><img src="/2018/10/06/vivadoHLS-0/5096-18985-tupian2.png" alt="img"></p><p>第三， 13个Xilinx专家讲解视频， 包括讲座和演示</p><p>地址： <a href="http://www.xilinx.com/training/vivado" target="_blank" rel="external">www.xilinx.com/training/vivado</a></p><p>1.<a href="http://www.origin.xilinx.com/csi/training/vivado/getting-started-with-vivado-high-level-synthesis.htm" target="_blank" rel="external">Getting Started with Vivado High-Level Synthesis</a></p><p>2.<a href="http://www.origin.xilinx.com/csi/training/vivado/verifying-your-vivado-hls-design.htm" target="_blank" rel="external">Verifying your Vivado HLS Design</a></p><p>3.<a href="http://www.origin.xilinx.com/csi/training/vivado/packaging-vivado-hls-ip-for-use-from-vivado-ip-catalog.htm" target="_blank" rel="external">Packaging Vivado HLS IP for use from Vivado IP Catalog</a></p><p>4.<a href="http://www.origin.xilinx.com/csi/training/vivado/generating-vivado-hls-block-for-use-in-system-generator-for-dsp.htm" target="_blank" rel="external">Generating Vivado HLS block for use in System Generator for DSP</a></p><p>5.<a href="http://www.origin.xilinx.com/csi/training/vivado/generating-vivado-hls-pcore-for-use-in-xilinx-platform-studio.htm" target="_blank" rel="external">Generating Vivado HLS pcore for use in Xilinx Platform Studio</a></p><p>6.<a href="http://www.origin.xilinx.com/csi/training/vivado/analyzing-your-vivado-hls-design.htm" target="_blank" rel="external">Analyzing your Vivado HLS design</a></p><p>7.<a href="http://forums.xilinx.com/t5/forums/replypage/board-id/cn-vivado/message-id/%C2%A7%09http:/www.origin.xilinx.com/csi/training/vivado/specifying-axi4-interfaces-for-your-vivado-hls-design.htm" target="_blank" rel="external">Specifying AXI4 interfaces for your Vivado HLS design</a></p><p>8.<a href="http://www.origin.xilinx.com/csi/training/vivado/using-vivado-hls-c-in-system-generator.htm" target="_blank" rel="external">Using Vivado HLS C/C++/SystemC block in System Generator</a></p><p>9.<a href="http://www.origin.xilinx.com/csi/training/vivado/using-vivado-hls-c-based-pcores-in-xps.htm" target="_blank" rel="external">Using Vivado HLS C/C++/SystemC based pcores in XPS</a></p><p>10.<a href="http://www.origin.xilinx.com/csi/training/vivado/floating-point-design-with-vivado-hls.htm" target="_blank" rel="external">Floating-Point Design with Vivado HLS</a></p><p>11.<a href="http://www.origin.xilinx.com/csi/training/vivado/using-vivado-hls-software-libraries-in-your-c-code.htm" target="_blank" rel="external">Using Vivado HLS SW libraries in your C, C++, SystemC code</a></p><p>12.<a href="http://www.origin.xilinx.com/csi/training/vivado/using-vivado-hls-tcl-interface.htm" target="_blank" rel="external">Using the Vivado HLS Tcl </a><a href="http://www.origin.xilinx.com/csi/training/vivado/using-vivado-hls-tcl-interface.htm" target="_blank" rel="external">interface</a></p><p>13.<a href="http://www.xilinx.com/csi/training/vivado/leveraging-opencv-and-high-level-synthesis-with-vivado.htm" target="_blank" rel="external">Leveraging </a><a href="http://www.xilinx.com/csi/training/vivado/leveraging-opencv-and-high-level-synthesis-with-vivado.htm" target="_blank" rel="external">OpenCV</a><a href="http://www.xilinx.com/csi/training/vivado/leveraging-opencv-and-high-level-synthesis-with-vivado.htm" target="_blank" rel="external"> and High Level Synthesis with Vivado</a></p><p>第四， 不停更新的武林秘籍</p><p><a href="http://www.xilinx.com/hls" target="_blank" rel="external">www.xilinx.com/hls</a></p><p><a href="http://www.xilinx.com/support/documentation/application_notes/xapp745-processor-control-vhls.pdf" target="_blank" rel="external">XAPP745 Processor Control of Vivado HLS Designs</a></p><p><a href="http://www.xilinx.com/support/documentation/application_notes/xapp793-memory-structures-video-vivado-hls.pdf" target="_blank" rel="external">XAPP793 Implementing Memory Structures for Video Processing in the Vivado HLS Tool</a></p><p><a href="http://www.xilinx.com/support/index.htm" target="_blank" rel="external">XAPP599 </a><a href="http://www.xilinx.com/support/index.htm" target="_blank" rel="external">Floating Point Design with Vivado HLS</a></p><p><a href="http://www.xilinx.com/support/documentation/application_notes/xapp890-zynq-sobel-vivado-hls.pdf" target="_blank" rel="external">XAPP890 Zynq All Programmable SoC Sobel Filter Implementation Using the Vivado HLS </a><a href="http://www.xilinx.com/support/documentation/application_notes/xapp890-zynq-sobel-vivado-hls.pdf" target="_blank" rel="external">Tool</a></p><p><a href="http://www.xilinx.com/support/documentation/application_notes/xapp1163.pdf" target="_blank" rel="external">XAPP1163 - Floating-Point PID Controller Design with Vivado HLS and System Generator for </a><a href="http://www.xilinx.com/support/documentation/application_notes/xapp1163.pdf" target="_blank" rel="external">DSP</a>、</p><p><a href="http://www.xilinx.com/support/documentation/application_notes/xapp1167.pdf" target="_blank" rel="external">XAPP1167 </a><a href="http://www.xilinx.com/support/documentation/application_notes/xapp1167.pdf" target="_blank" rel="external">Accelerating OpenCV Applications with Zynq using Vivado HLS Video Libraries</a></p><p><img src="/2018/10/06/vivadoHLS-0/5096-18986-tupian4.png" alt="img"></p><h2 id="第一个Vivado-HLS工程"><a href="#第一个Vivado-HLS工程" class="headerlink" title="第一个Vivado HLS工程"></a>第一个Vivado HLS工程</h2><p><a href="http://xilinx.eetrend.com/d6-xilinx/webinar/2016-07/10340.html" target="_blank" rel="external">http://xilinx.eetrend.com/d6-xilinx/webinar/2016-07/10340.html</a></p><p><a href="http://xilinx.eetrend.com/d6-xilinx/blog/2016-12/10734.html" target="_blank" rel="external">http://xilinx.eetrend.com/d6-xilinx/blog/2016-12/10734.html</a></p><p>对于Vivado Hls来说，输入包括Tesbench，C/C++源代码和Directives，相应的输出为IP Catalog，DSP和SysGen，特别的，一个工程只能有一个顶层函数用于综和，这个顶层函数下面的子函数也是可以被综合的，会生成相应的VHDL和Verilog代码，所以，C综合后的RTL代码结构通常是跟原始C描述的结构是一致的，除非是子函数功能很简单，所需要的逻辑量很小。 通常在main函数以下的函数都可以被综合，也就是说，并不是所有的C/C++都可以被综合，动态内存分配和涉及到操作系统层面的操作不可以被综合。 </p><h3 id="本部分结构框架："><a href="#本部分结构框架：" class="headerlink" title="本部分结构框架："></a>本部分结构框架：</h3><p>Creat New Project新建文档</p><p>C simulation</p><p>C systhesis</p><p>RTL级仿真</p><p>IP封装</p><p>总结</p><h3 id="1-Creat-New-Project新建文档"><a href="#1-Creat-New-Project新建文档" class="headerlink" title="1.Creat New Project新建文档"></a>1.Creat New Project新建文档</h3><p><img src="/2018/10/06/vivadoHLS-0/10734-27136-vivado_-1.png" alt="img"></p><p>​          新建一个Project name，点next（这里选取简单的4选1数据选择器为例，主要是说明流程）</p><p><img src="/2018/10/06/vivadoHLS-0/10734-27137-vivado_-2.png" alt="img"></p><p>​    在Add Files里添加mux41.c文件，点next</p><p><img src="/2018/10/06/vivadoHLS-0/10734-27138-vivado_-3.png" alt="img"></p><p>​    添加mux41_test测试文件，点next</p><p><img src="/2018/10/06/vivadoHLS-0/10734-27139-vivado_-4.png" alt="img"></p><p>点Part，这里选择Board下面的Zedboard Zynq开发板，然后点OK和finish</p><p><img src="/2018/10/06/vivadoHLS-0/10734-27140-vivado_-5.png" alt="img"></p><p>注释：<br>mux41.c代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mux41.h"</span></span></div><div class="line"><span class="function">int1 <span class="title">mux41</span><span class="params">(int1 sig_a, int1 sig_b,int1 sig_c,int1 sig_d, <span class="keyword">int</span> select)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(select==<span class="number">0</span>)</div><div class="line">       <span class="keyword">return</span> sig_a;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(select==<span class="number">1</span>)</div><div class="line">       <span class="keyword">return</span> sig_b;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(select==<span class="number">2</span>)</div><div class="line">       <span class="keyword">return</span> sig_c;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(select==<span class="number">3</span>)</div><div class="line">       <span class="keyword">return</span> sig_d;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>mux41.h代码：(头文件)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ap_cint.h&gt;</span></span></div></pre></td></tr></table></figure><p>mux41_tb代码：(testbench)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mux41.h"</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> res1 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> res2 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> res3 = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> res4 = <span class="number">0</span>;</div><div class="line">  res1=mux41(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">    res2=mux41(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</div><div class="line">    res3=mux41(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">2</span>);</div><div class="line">    res4=mux41(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>);</div><div class="line">    <span class="keyword">if</span>(res1 &amp;&amp; res2 &amp;&amp; res3 &amp;&amp; res4)</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"test passed, well done!\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="2-C-simulation"><a href="#2-C-simulation" class="headerlink" title="2.C simulation"></a>2.C simulation</h3><p>在菜单里Project&gt;Run C simulation，C simulation可以得到csim文件</p><p><img src="/2018/10/06/vivadoHLS-0/10734-27141-vivado-6.png" alt="img"></p><p>从图中看到，可以看到test passed,well done!，证明结果是正确的：</p><p><img src="/2018/10/06/vivadoHLS-0/10734-27142-vivado-7.png" alt="img"></p><h3 id="3-C-systhesis"><a href="#3-C-systhesis" class="headerlink" title="3.C systhesis:"></a>3.C systhesis:</h3><p><img src="/2018/10/06/vivadoHLS-0/10734-27143-vivado_-8.png" alt="img"></p><p>注意综合得到的verilog代码的可读性很差，不需要读懂，所以大多数优化都在C这个层面去做的，下面是综合后的verilog代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">// ==============================================================</div><div class="line">// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC</div><div class="line">// Version: 2016.3</div><div class="line">// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.</div><div class="line">// </div><div class="line">// ===========================================================</div><div class="line">`timescale 1 ns / 1 ps </div><div class="line">(* CORE_GENERATION_INFO="mux41,hls_ip_2016_3,&#123;HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-</div><div class="line">1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.258000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=41&#125;" *)</div><div class="line">module mux41 (</div><div class="line">        ap_start,</div><div class="line">        ap_done,</div><div class="line">        ap_idle,</div><div class="line">        ap_ready,</div><div class="line">        sig_a,</div><div class="line">        sig_b,</div><div class="line">        sig_c,</div><div class="line">        sig_d,</div><div class="line">        select_r,</div><div class="line">        ap_return</div><div class="line">);</div><div class="line">parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;</div><div class="line">parameter    ap_const_lv32_1 = 32'b1;</div><div class="line">parameter    ap_const_lv32_2 = 32'b10;</div><div class="line">input   ap_start;</div><div class="line">output   ap_done;</div><div class="line">output   ap_idle;</div><div class="line">output   ap_ready;</div><div class="line">input  [0:0] sig_a;</div><div class="line">input  [0:0] sig_b;</div><div class="line">input  [0:0] sig_c;</div><div class="line">input  [0:0] sig_d;</div><div class="line">input  [31:0] select_r;</div><div class="line">output  [0:0] ap_return;</div><div class="line">wire   [0:0] tmp_fu_60_p2;</div><div class="line">wire   [0:0] tmp_1_fu_66_p2;</div><div class="line">wire   [0:0] sel_tmp1_fu_86_p2;</div><div class="line">wire   [0:0] sel_tmp2_fu_92_p2;</div><div class="line">wire   [0:0] sel_tmp_fu_78_p3;</div><div class="line">wire   [0:0] tmp_2_fu_72_p2;</div><div class="line">wire   [0:0] tmp7_fu_106_p2;</div><div class="line">wire   [0:0] sel_tmp5_fu_112_p2;</div><div class="line">wire   [0:0] p_0_fu_98_p3;</div><div class="line">assign ap_done = ap_start;</div><div class="line">assign ap_idle = 1'b1;</div><div class="line">assign ap_ready = ap_start;</div><div class="line">assign ap_return = ((sel_tmp5_fu_112_p2[0:0] === 1'b1) ? p_0_fu_98_p3 : sig_d);</div><div class="line">assign p_0_fu_98_p3 = ((sel_tmp2_fu_92_p2[0:0] === 1'b1) ? sig_b : sel_tmp_fu_78_p3);</div><div class="line">assign sel_tmp1_fu_86_p2 = (tmp_fu_60_p2 ^ 1'b1);</div><div class="line">assign sel_tmp2_fu_92_p2 = (tmp_1_fu_66_p2 &amp; sel_tmp1_fu_86_p2);</div><div class="line">assign sel_tmp5_fu_112_p2 = (tmp7_fu_106_p2 | tmp_fu_60_p2);</div><div class="line">assign sel_tmp_fu_78_p3 = ((tmp_fu_60_p2[0:0] === 1'b1) ? sig_a : sig_c);</div><div class="line">assign tmp7_fu_106_p2 = (tmp_1_fu_66_p2 | tmp_2_fu_72_p2);</div><div class="line">assign tmp_1_fu_66_p2 = ((select_r == ap_const_lv32_1) ? 1'b1 : 1'b0);</div><div class="line">assign tmp_2_fu_72_p2 = ((select_r == ap_const_lv32_2) ? 1'b1 : 1'b0);</div><div class="line">assign tmp_fu_60_p2 = ((select_r == ap_const_lv32_0) ? 1'b1 : 1'b0);</div><div class="line">endmodule //mux41</div></pre></td></tr></table></figure><h3 id="4-RTL级仿真"><a href="#4-RTL级仿真" class="headerlink" title="4.RTL级仿真"></a>4.RTL级仿真</h3><p>在菜单里Solution&gt;RunC/RTL cosimulation，需要对Co-similation Dialog设置如下：</p><p><img src="/2018/10/06/vivadoHLS-0/10734-27144-vivado-9.png" alt="img"></p><p>得到如下结果，我们会发现Verilog的Status是pass，证明C/RTL cosimulation成功:</p><p><img src="/2018/10/06/vivadoHLS-0/10734-27145-vivado-10.png" alt="img"></p><p>然后我们点开波形查看窗口，此时会自动打开Vivado软件，从图中看到，mux41的功能正确：</p><p><img src="/2018/10/06/vivadoHLS-0/10734-27146-vivado-11.png" alt="img"></p><h3 id="5-IP封装"><a href="#5-IP封装" class="headerlink" title="5.IP封装"></a>5.IP封装</h3><p>在菜单里Solution&gt;Export TL，设置如下：</p><p><img src="/2018/10/06/vivadoHLS-0/10734-27147-vivado-12.png" alt="img"></p><p>IP封装后，会得到impl文件，其中就有我们所需要的三个子文件ip，verilog，vhdl</p><p><img src="/2018/10/06/vivadoHLS-0/10734-27148-vivado-13.png" alt="img"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>事实上，在整个流程中，用户先创建一个设计 C、C++ 或 SystemC 源代码，以及一个C的测试平台。随后需要用 GCC/G++或 Visual C++ 仿真器验证设计的系统行为。一旦行为设计运行良好，对应的测试台的问题全部解决，就可以通过 Vivado HLS Synthesis 运行设计，生成 RTL 设计，代码可以是 Verilog，也可以是 VHDL。有了 RTL 后，随即可以执行设计的 Verilog 或 VHDL 仿真，或使用工具的C封装器技术创建 SystemC 版本。然后可以进行System C架构级仿真，进一步根据之前创建的 C 测试平台，验证设计的架构行为和功能。设计固化后，就可以通过 Vivado 设计套件的物理实现流程来运行设计，将设计编程到器件上，在硬件中运行和/或使用 IP 封装器将设计转为可重用的 IP。随后使用 IP 集成器将 IP 集成到设计中，或在系统生成器 （System Generator） 中运行 IP。</p><h2 id="HLS进阶学习"><a href="#HLS进阶学习" class="headerlink" title="HLS进阶学习"></a>HLS进阶学习</h2><h3 id="初步学习计划"><a href="#初步学习计划" class="headerlink" title="初步学习计划"></a>初步学习计划</h3><p>HLS说到底是一个工具，作为工具，应用为先。</p><h4 id="第一步-利用教程和例程跑一个hls仿真"><a href="#第一步-利用教程和例程跑一个hls仿真" class="headerlink" title="第一步 利用教程和例程跑一个hls仿真"></a>第一步 利用教程和例程跑一个hls仿真</h4><p>详情参考ug871第二章 create a high-level synthesis project</p><p>以下仅对值得注意的地方进行记录</p><p>很好，我点进上文的参考代码链接，给我出现了以下界面</p><p><img src="/2018/10/06/vivadoHLS-0/1538791324962.png" alt="1538791324962"></p><p>我觉得事情不简单，下拉以后</p><p><img src="/2018/10/06/vivadoHLS-0/1538791380106.png" alt="1538791380106"></p><p>好的吧，出现最新版教程了。左边侧栏勾选tutorials,然后把document type 那边的user guides去掉。往下拉你就可以看到清纯不做作的ug871 2018.2。</p><p><img src="/2018/10/06/vivadoHLS-0/1538791548492.png" alt="1538791548492"></p><p>………………换文档肯定要跑路的啊！（不是）换文档肯定要看看有什么区别的啊！</p><p><img src="/2018/10/06/vivadoHLS-0/1538791799084.png" alt="1538791799084"></p><p>​                                                                           2018.2</p><p><img src="/2018/10/06/vivadoHLS-0/1538749785686.png" alt="1538749785686"></p><p>​                                                                              2013.1</p><p>初步判断没什么实质性区别，那好，我去看看操作。其实本来差别就不可能很大，主要是怕有一些操作不同。这个时候第一步就是打开我的<del>垃圾</del> vivado hls 2016.1，暗中观察一下初始GUI页面跟哪一版的教程更像。</p><p>然后我觉得我应该用新版教程了(っ•̀ω•́)っ✎⁾⁾。接下来这句话：详情参考ug871 2018.2 ch.2 hls introduction</p><p>哦好的吧，我本来想搞一个能看Waveforms的工程出来，然后发现ch2这章introduction的三个lab是在教软件使用方法。好吧，那我放一个我lab 2成功的截图好了。</p><p><img src="/2018/10/06/vivadoHLS-0/TIM图片201810061220.png" alt="TIM图片201810061220"></p><p>说一下体验，教程还是很详细的，基本都很顺。除了lab 2用commad prompt的时候，出了一点小问题。因为第一步要定位到introduction文件夹里，我一开始用cd 命令……然后就一点都不ok,查了才发现windows cd命令只能切当前盘内路径。</p><p>然后如果像我一样不按原设定路径安装的话，这部分修改大致如下：</p><p><img src="/2018/10/06/vivadoHLS-0/TIM图片20181006122457.png" alt="TIM图片20181006122457"></p><p>因为我混乱的路径就是……</p><p>E:\FileRecv\fpga\ug871-design-files\ug871-design-files\Introduction</p><p>这样的啊，然后我又习惯性地把fir_prj放到我平常放代码的地方，就不在lab1目录下。为了完成这个实验，那当然是！复制过来！！！</p><p>之后操作就一切正常。</p><p>总之官方教程文档很详细。只是编一个初始的小工程编译就花了不少时间，我已经感受到了来自vivado的威胁(Ｔ▽Ｔ)</p><p>心怀电路写C第一步，完成。</p><h4 id="第二步-利用手上的ug871和ug902文档研究官方例程和语法约束"><a href="#第二步-利用手上的ug871和ug902文档研究官方例程和语法约束" class="headerlink" title="第二步 利用手上的ug871和ug902文档研究官方例程和语法约束"></a>第二步 利用手上的ug871和ug902文档研究官方例程和语法约束</h4><p>ug871官方例程教程</p><p><img src="/2018/10/06/vivadoHLS-0/1538749785686.png" alt="1538749785686"></p><p>ug902语法约束</p><p><img src="/2018/10/06/vivadoHLS-0/1538789542511.png" alt="1538789542511"></p><h4 id="第三步-将hls运用在参赛项目上"><a href="#第三步-将hls运用在参赛项目上" class="headerlink" title="第三步 将hls运用在参赛项目上"></a>第三步 将hls运用在参赛项目上</h4><p>过程记录如下</p><h4 id="第四步-后期完善学习，记录一些可优化技巧"><a href="#第四步-后期完善学习，记录一些可优化技巧" class="headerlink" title="第四步 后期完善学习，记录一些可优化技巧"></a>第四步 后期完善学习，记录一些可优化技巧</h4>]]></content>
      
      
      <categories>
          
          <category> VivadoHLS </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>uCOSIII(一)</title>
      <link href="/2018/10/04/uCOSIII1/"/>
      <url>/2018/10/04/uCOSIII1/</url>
      
        <content type="html"><![CDATA[<h1 id="UCOSIII学习"><a href="#UCOSIII学习" class="headerlink" title="UCOSIII学习"></a>UCOSIII学习</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学了一年单片机，从51到tm4以及stm32,基本都是在while(1)里面“裸奔”。18年暑假的时候突然想玩一下操作系统，就操作了一下。原来有一个官方移植的tm4c1294例程。本来是想改一改移植到tm4c123g上然后用ccs作为开发环境，研究了一天发现micrium官方对于tiva-c系列只提供了IAR和realview开发工具的startup.c。我猜直接把ccs的startup_ccs.c换掉realview的或许可以吧。不过我的首要目的是学单片机上操作系统的原理和使用方法，所以就直接用官方移植的例程上手了。</p><h2 id="基于tm4c1294的UCOSIII系统搭建"><a href="#基于tm4c1294的UCOSIII系统搭建" class="headerlink" title="基于tm4c1294的UCOSIII系统搭建"></a>基于tm4c1294的UCOSIII系统搭建</h2><h3 id="官方例程下载"><a href="#官方例程下载" class="headerlink" title="官方例程下载"></a>官方例程下载</h3><h3 id="1-进入micrium官网"><a href="#1-进入micrium官网" class="headerlink" title="1.进入micrium官网"></a>1.进入micrium官网</h3><p>国外网站打开有点慢，等个半分钟到一分钟就行。</p><p><a href="https://www.micrium.com/" target="_blank" rel="external">https://www.micrium.com/</a></p><p><img src="/2018/10/04/uCOSIII1/1538641804364.png" alt="1538641804364"></p><h3 id="2-点击导航栏的Downloads进入下载页面"><a href="#2-点击导航栏的Downloads进入下载页面" class="headerlink" title="2.点击导航栏的Downloads进入下载页面"></a>2.点击导航栏的Downloads进入下载页面</h3><p>下拉页面找到根据MCU生产商浏览，找到Texas Instrument。</p><p><img src="/2018/10/04/uCOSIII1/1538642099029.png" alt="1538642099029"></p><h3 id="3-选中tm4c1294进入下载界面"><a href="#3-选中tm4c1294进入下载界面" class="headerlink" title="3.选中tm4c1294进入下载界面"></a>3.选中tm4c1294进入下载界面</h3><p><img src="/2018/10/04/uCOSIII1/1538642588422.png" alt="1538642588422"></p><h3 id="4-直接点击资源这一栏"><a href="#4-直接点击资源这一栏" class="headerlink" title="4.直接点击资源这一栏"></a>4.直接点击资源这一栏</h3><p>值得注意的是micrium提供的keil MDK是v4，所以导入到v5会有警告提示，管它呢。反正最后不影响使用就是了。</p><p><img src="/2018/10/04/uCOSIII1/1538642688315.png" alt="1538642688315"></p><h3 id="5-登录账号并下载"><a href="#5-登录账号并下载" class="headerlink" title="5.登录账号并下载"></a>5.登录账号并下载</h3><p>注册一个micrium账号，Log in to Download</p><p><img src="/2018/10/04/uCOSIII1/1538643022452.png" alt="1538643022452"></p><h3 id="文件结构解析"><a href="#文件结构解析" class="headerlink" title="文件结构解析"></a>文件结构解析</h3><h4 id="文件夹初探"><a href="#文件夹初探" class="headerlink" title="文件夹初探"></a>文件夹初探</h4><p>文件夹解压出来如下</p><p><img src="/2018/10/04/uCOSIII1/1538643201614.png" alt="1538643201614"></p><h5 id="第一个EvalBoards就是MCU板子移植的相关代码"><a href="#第一个EvalBoards就是MCU板子移植的相关代码" class="headerlink" title="第一个EvalBoards就是MCU板子移植的相关代码"></a>第一个EvalBoards就是MCU板子移植的相关代码</h5><p>我们要找的keil工程文件在EvalBoards-&gt;TI-&gt;EK-TM4C1294XL-&gt;OS3-&gt;KeilMDK这条路径下。</p><p>在OS3那一层并列一个”BSP”的文件夹，这是micrium写的tm4c1294板子驱动的相关代码。不过我采用的是tiva-ware，这个BSP驱动后续可能只用一部分，不然会重定义然后打架。</p><p><img src="/2018/10/04/uCOSIII1/1538643385032.png" alt="1538643385032"></p><h5 id="剩下三个就是UCOSIII的资源文件"><a href="#剩下三个就是UCOSIII的资源文件" class="headerlink" title="剩下三个就是UCOSIII的资源文件"></a>剩下三个就是UCOSIII的资源文件</h5><p>这部分详细介绍参考《嵌入式实时操作系统uCOS-3》（北航出版社）。</p><p><strong>uC-CPU</strong></p><p>文件结构如下</p><p>\uC-CPU</p><p>​    \cpu_core.c(包含适用所有CPU架构的C代码 包含用来测量中断关闭时间的函数)</p><p>​    \cpu_core.h（包含用于测量中断关闭时间的变量定义）</p><p>​    \cpu_def.h（包含uC/CPU模块使用的宏定义）</p><p>​    \ARM-Cortex-M4\RealView</p><p>​        \cpu.h(包含一些数据类型定义)</p><p>​        \cpu_a.asm（汇编语言实现开关中断、计算前导零、使能缓存、建立MPUs、MMU的函数，其中函数可以直接在C代码里调用）</p><p>​        \cpu_c.c（基于特定cpu架构的代码）</p><p><strong>uC-LIB</strong></p><p>可移植库函数如下</p><p>\lib_ascii.c及其头文件（其中函数可以替代大小字母转化和数字字母互化的库函数）</p><p>\lib_def.h(定义许多常量)</p><p>\lib_math.c及其头文件（其中函数可以替代rand()、srand()）</p><p>\lib_mem.c及其头文件（其中函数可以替代memclr()、memset()、memcpy()、memcmp()）等</p><p>lib_str.c及其头文件（其中函数可以以替代strlen()、strcpy()、strcmp()）等</p><p><strong>uCOS-III</strong></p><p>其中与处理器类型无关文件如下</p><p>\Source</p><p>​    \os_cfg.app.c（根据os_cfg_app.h中宏定义定义变量和数据）</p><p>​    \os_core.c（包含uCOSIII内核功能模块）</p><p>​    \os_dbg.c（包含内核调试器）</p><p>​    \os_flag.c（包含事件标志管理代码）</p><p>​    \os_int.c（包含中断处理任务代码）</p><p>​    \os_mem.c（包含存储分区代码）</p><p>​    \os_msg.c（包含消息处理代码）</p><p>​    \os_mutex.c（包含互斥信号量代码）</p><p>​    \os_pend.multi.c（包含允许任务同时等待多个信号量和多个消息队列代码）</p><p>​    \os_prio.c（用于追踪已就绪任务）</p><p>​    \os_q.c（包含消息队列管理代码）</p><p>​    \os_sem.c（包含信号量管理代码）</p><p>​    \os_stat.c(包含统计任务代码)</p><p>​    \os_task.c（包含任务的管理代码）</p><p>​    \os_tick.c（包含可管理正在延时和超时等待任务）</p><p>​    \os_time.c（包含延时代码）</p><pre><code>\os_tmr.c（包含软件定时器代码）</code></pre><p>​    \os_var.c（包含uCOSIII的全局变量）</p><p>​    \os.h（uCOSIII主要头文件）</p><p>​    \os_type.h（包含数据类型声明）</p><h3 id="keil环境配置"><a href="#keil环境配置" class="headerlink" title="keil环境配置"></a>keil环境配置</h3><p>在第一次导入工程的时候一般会提示识别到器件为tm4c1294,直接按提示下支持包就行。</p><p>器件型号为TM4C1294NCPDT。</p><p>我记得只要器件型号对上了，其他配置在这个例程下基本都是配好的。</p><p>只需要在魔术棒的C/C++选项卡把Preprocessor Symbols的Define填上     rvmdk PART_TM4C1294NCPDT     就行。<img src="/2018/10/04/uCOSIII1/1538653394096.png" alt="1538653394096"></p><p>如果出现什么问题，参照以下文档配置keil下的tm4开发环境：</p><p><a href="https://wenku.baidu.com/view/6d23b80dbc64783e0912a21614791711cc7979f4.html" target="_blank" rel="external">https://wenku.baidu.com/view/6d23b80dbc64783e0912a21614791711cc7979f4.html</a></p><h3 id="tiva-ware联动"><a href="#tiva-ware联动" class="headerlink" title="tiva-ware联动"></a>tiva-ware联动</h3><p>tiva-ware是一个ti的软件开发包，里面有bsp板级支持以及tiva-c系列各型号开发板的库函数和例程。</p><p>在keil里面使用tiva-ware只需要将tiva-ware包里面针对realview开发工具的driverlib.lib添入工程就行。</p><p>顺便在魔术棒的C/C++选项卡里的 Include Paths一栏加入你的tiva-ware包的路径。</p><p><img src="/2018/10/04/uCOSIII1/1538653571710.png" alt="1538653571710"></p><h2 id="第一个UCOSIII工程"><a href="#第一个UCOSIII工程" class="headerlink" title="第一个UCOSIII工程"></a>第一个UCOSIII工程</h2><p>下好例程，配好环境，来试试水</p><p>软件设计如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">"app_cfg.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;cpu_core.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;os.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">"..\bsp\bsp.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">"..\bsp\bsp_led.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">"..\bsp\bsp_sys.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">"..\bsp\bsp_misc.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;lib_ascii.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;lib_math.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;lib_mem.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span>  <span class="meta-string">&lt;lib_str.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"inc/hw_memmap.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"driverlib/gpio.h"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"driverlib/sysctl.h"</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> START_TASK_PRIO3</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> START_STK_SIZE 128</span></div><div class="line">OS_TCB StartTaskTCB;</div><div class="line">CPU_STK START_TASK_STK[START_STK_SIZE];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">start_task</span><span class="params">(<span class="keyword">void</span> *p_arg)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TASK1_TASK_PRIO4</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TASK1_STK_SIZE 128</span></div><div class="line">OS_TCB Task1_TaskTCB</div><div class="line">CPU_STK TASK1_TASK_STK[TASK1_STK_SIZE];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">task1_task</span><span class="params">(<span class="keyword">void</span> *p_arg)</span></span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TASK2_TASK_PRIO5</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TASK2_STK_SIZE 128</span></div><div class="line">OS_TCB Task2_TaskTCB;</div><div class="line">CPU_STK TASK2_TASK_STK[TASK2_STK_SIZE];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">task2_task</span><span class="params">(<span class="keyword">void</span> *p_arg)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    OS_ERR  err;</div><div class="line">    CPU_SR_ALLOC();                                              <span class="comment">/* Disable all interrupts.*/</span></div><div class="line">    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);</div><div class="line">    <span class="keyword">while</span>(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOF))</div><div class="line">    &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_0|GPIO_PIN_4);</div><div class="line">    OSInit(&amp;err);                                               <span class="comment">/* Init uC/OS-III. */</span></div><div class="line">    OS_CRITICAL_ENTER();</div><div class="line">   OSTaskCreate((OS_TCB * )&amp;StartTaskTCB,</div><div class="line"> (CPU_CHAR* )<span class="string">"start task"</span>, </div><div class="line">                 (OS_TASK_PTR )start_task, </div><div class="line">                 (<span class="keyword">void</span>* )<span class="number">0</span>,</div><div class="line">                 (OS_PRIO  )START_TASK_PRIO,     </div><div class="line">                 (CPU_STK   * )&amp;START_TASK_STK[<span class="number">0</span>],</div><div class="line">                 (CPU_STK_SIZE)START_STK_SIZE/<span class="number">10</span>,</div><div class="line">                 (CPU_STK_SIZE)START_STK_SIZE,</div><div class="line">                 (OS_MSG_QTY  )<span class="number">0</span>,</div><div class="line">                 (OS_TICK  )<span class="number">0</span>,</div><div class="line">                 (<span class="keyword">void</span>   * )<span class="number">0</span>,</div><div class="line">                 (OS_OPT      )OS_OPT_TASK_STK_CHK|OS_OPT_TASK_STK_CLR|OS_OPT_TASK_SAVE_FP, </div><div class="line">                 (OS_ERR * )&amp;err);</div><div class="line">OS_CRITICAL_EXIT(); </div><div class="line">OSStart(&amp;err);      </div><div class="line"></div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</div><div class="line">&#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">start_task</span><span class="params">(<span class="keyword">void</span> *p_arg)</span></span></div><div class="line">&#123;</div><div class="line">CPU_INT32U  cpu_clk_freq;</div><div class="line">    CPU_INT32U  cnts;</div><div class="line">OS_ERR err;</div><div class="line">CPU_SR_ALLOC();</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">   (<span class="keyword">void</span>)&amp;p_arg;</div><div class="line"></div><div class="line">    BSP_Init();                                           <span class="comment">/* Initialize BSP functions */</span></div><div class="line"></div><div class="line">    cpu_clk_freq = BSP_SysClkFreqGet();                <span class="comment">/* Determine SysTick reference freq.*/</span></div><div class="line">    cnts         = cpu_clk_freq                          <span class="comment">/* Determine nbr SysTick increments*/</span></div><div class="line">                 / (CPU_INT32U)OSCfg_TickRate_Hz;</div><div class="line"></div><div class="line">    OS_CPU_SysTickInit(cnts);</div><div class="line">    CPU_Init();  </div><div class="line"></div><div class="line"></div><div class="line">OS_CRITICAL_ENTER();</div><div class="line">OSTaskCreate((OS_TCB * )&amp;Task1_TaskTCB,</div><div class="line"> (CPU_CHAR* )<span class="string">"Task1 task"</span>, </div><div class="line">                 (OS_TASK_PTR )task1_task, </div><div class="line">                 (<span class="keyword">void</span>* )<span class="number">0</span>,</div><div class="line">                 (OS_PRIO  )TASK1_TASK_PRIO,     </div><div class="line">                 (CPU_STK   * )&amp;TASK1_TASK_STK[<span class="number">0</span>],</div><div class="line">                 (CPU_STK_SIZE)TASK1_STK_SIZE/<span class="number">10</span>,</div><div class="line">                 (CPU_STK_SIZE)TASK1_STK_SIZE,</div><div class="line">                 (OS_MSG_QTY  )<span class="number">0</span>,</div><div class="line">                 (OS_TICK  )<span class="number">0</span>,</div><div class="line">                 (<span class="keyword">void</span>   * )<span class="number">0</span>,</div><div class="line">                 (OS_OPT      )OS_OPT_TASK_STK_CHK|OS_OPT_TASK_STK_CLR|OS_OPT_TASK_SAVE_FP,</div><div class="line">                 (OS_ERR * )&amp;err);</div><div class="line"> </div><div class="line"></div><div class="line">OSTaskCreate((OS_TCB * )&amp;Task2_TaskTCB,</div><div class="line"> (CPU_CHAR* )<span class="string">"task2 task"</span>, </div><div class="line">                 (OS_TASK_PTR )task2_task, </div><div class="line">                 (<span class="keyword">void</span>* )<span class="number">0</span>,</div><div class="line">                 (OS_PRIO  )TASK2_TASK_PRIO,     </div><div class="line">                 (CPU_STK   * )&amp;TASK2_TASK_STK[<span class="number">0</span>],</div><div class="line">                 (CPU_STK_SIZE)TASK2_STK_SIZE/<span class="number">10</span>,</div><div class="line">                 (CPU_STK_SIZE)TASK2_STK_SIZE,</div><div class="line">                 (OS_MSG_QTY  )<span class="number">0</span>,</div><div class="line">                 (OS_TICK  )<span class="number">0</span>,</div><div class="line">                 (<span class="keyword">void</span>   * )<span class="number">0</span>,</div><div class="line">                 (OS_OPT      )OS_OPT_TASK_STK_CHK|OS_OPT_TASK_STK_CLR|OS_OPT_TASK_SAVE_FP, </div><div class="line">                 (OS_ERR * )&amp;err); </div><div class="line">OS_CRITICAL_EXIT();</div><div class="line"> </div><div class="line">OSTaskDel((OS_TCB*)<span class="number">0</span>,&amp;err);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">task1_task</span><span class="params">(<span class="keyword">void</span> *p_arg)</span></span></div><div class="line">&#123;</div><div class="line">CPU_INT08U task1_num=<span class="number">0</span>;</div><div class="line">CPU_INT32U ui32Loop1;</div><div class="line">OS_ERR err;</div><div class="line">CPU_SR_ALLOC();</div><div class="line">p_arg = p_arg;</div><div class="line"></div><div class="line"></div><div class="line">OS_CRITICAL_ENTER();</div><div class="line"></div><div class="line">OS_CRITICAL_EXIT();</div><div class="line"><span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">&#123;</div><div class="line">task1_num++;</div><div class="line"> <span class="comment">//BSP_LED_Toggle(1);</span></div><div class="line">        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_4, GPIO_PIN_4);</div><div class="line">        <span class="keyword">for</span>(ui32Loop1 = <span class="number">0</span>; ui32Loop1 &lt; <span class="number">20000</span>; ui32Loop1++)</div><div class="line">        &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_4, <span class="number">0x0</span>);</div><div class="line">        <span class="keyword">for</span>(ui32Loop1 = <span class="number">0</span>; ui32Loop1 &lt; <span class="number">20000</span>; ui32Loop1++)</div><div class="line">        &#123;</div><div class="line">        &#125;</div><div class="line"><span class="keyword">if</span>(task1_num==<span class="number">5</span>) </div><div class="line">&#123;</div><div class="line">OSTaskDel((OS_TCB*)&amp;Task2_TaskTCB,&amp;err);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">OSTimeDlyHMSM(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,OS_OPT_TIME_HMSM_STRICT,&amp;err); </div><div class="line"></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">task2_task</span><span class="params">(<span class="keyword">void</span> *p_arg)</span></span></div><div class="line">&#123;</div><div class="line">CPU_INT08U task2_num=<span class="number">0</span>;</div><div class="line">CPU_INT32U ui32Loop;</div><div class="line">OS_ERR err;</div><div class="line">CPU_SR_ALLOC();</div><div class="line">p_arg = p_arg;</div><div class="line"></div><div class="line"></div><div class="line">OS_CRITICAL_ENTER();</div><div class="line"></div><div class="line">OS_CRITICAL_EXIT();</div><div class="line"><span class="keyword">while</span>(<span class="number">1</span>)</div><div class="line">&#123;</div><div class="line">task2_num++;</div><div class="line">     <span class="comment">//BSP_LED_Toggle(2);  </span></div><div class="line"></div><div class="line">       GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_0, GPIO_PIN_0);</div><div class="line">        <span class="keyword">for</span>(ui32Loop = <span class="number">0</span>; ui32Loop &lt; <span class="number">20000</span>; ui32Loop++)</div><div class="line">        &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_0, <span class="number">0x0</span>);</div><div class="line">        <span class="keyword">for</span>(ui32Loop = <span class="number">0</span>; ui32Loop &lt; <span class="number">20000</span>; ui32Loop++)</div><div class="line">        &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">OSTimeDlyHMSM(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,OS_OPT_TIME_HMSM_STRICT,&amp;err); </div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>下载现象为：任务一运行5次后删掉任务二。所以可以看到本来是两个led几乎同时闪烁，闪烁4次后，有一个led停止闪烁，另一个继续闪烁。</p><p>至此，你就在tm4c1294上拥有了一个基于tiva-ware固件库可以跑的uCOSIII。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
  
  
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>您的好友阿月月突然上线</p>]]></content>
      
    </entry>
    
  
</search>
